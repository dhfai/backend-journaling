{
	"info": {
		"name": "Backend Journaling API",
		"description": "Complete API collection for authentication, notes, todos, and tasks management.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"version": "2.0.0"
	},
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080/api/v1",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "refresh_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "test_email",
			"value": "test@example.com",
			"type": "string"
		},
		{
			"key": "test_password",
			"value": "SecurePassword123!",
			"type": "string"
		},
		{
			"key": "note_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "block_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "todo_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "task_id",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "Health Check",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/health",
					"protocol": "http",
					"host": ["localhost"],
					"port": "8080",
					"path": ["health"]
				},
				"description": "Check if the server is running and healthy."
			},
			"response": []
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log('Registration successful - Check email for OTP');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{test_email}}\",\n  \"username\": \"testuser\",\n  \"password\": \"{{test_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/register",
							"host": ["{{base_url}}"],
							"path": ["auth", "register"]
						},
						"description": "Register a new user account. An OTP will be sent to the provided email address for verification."
					},
					"response": []
				},
				{
					"name": "Verify OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.data && jsonData.data.access_token) {",
									"        pm.collectionVariables.set('access_token', jsonData.data.access_token);",
									"        pm.collectionVariables.set('refresh_token', jsonData.data.refresh_token);",
									"        console.log('Tokens saved to collection variables');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{test_email}}\",\n  \"otp\": \"123456\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/verify-otp",
							"host": ["{{base_url}}"],
							"path": ["auth", "verify-otp"]
						},
						"description": "Verify the OTP sent to email during registration. Returns access and refresh tokens."
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.data && jsonData.data.access_token) {",
									"        pm.collectionVariables.set('access_token', jsonData.data.access_token);",
									"        pm.collectionVariables.set('refresh_token', jsonData.data.refresh_token);",
									"        console.log('Tokens saved to collection variables');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": ["{{base_url}}"],
							"path": ["auth", "login"]
						},
						"description": "Authenticate user with email and password. Returns access and refresh tokens."
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.data && jsonData.data.access_token) {",
									"        pm.collectionVariables.set('access_token', jsonData.data.access_token);",
									"        pm.collectionVariables.set('refresh_token', jsonData.data.refresh_token);",
									"        console.log('New tokens saved to collection variables');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/refresh",
							"host": ["{{base_url}}"],
							"path": ["auth", "refresh"]
						},
						"description": "Get a new access token using a valid refresh token. Old refresh token will be revoked and replaced."
					},
					"response": []
				},
				{
					"name": "Logout",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/logout",
							"host": ["{{base_url}}"],
							"path": ["auth", "logout"]
						},
						"description": "Logout user and revoke the refresh token."
					},
					"response": []
				},
				{
					"name": "Forgot Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{test_email}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/forgot-password",
							"host": ["{{base_url}}"],
							"path": ["auth", "forgot-password"]
						},
						"description": "Request a password reset OTP. OTP will be sent to the email if account exists."
					},
					"response": []
				},
				{
					"name": "Reset Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{test_email}}\",\n  \"otp\": \"123456\",\n  \"new_password\": \"NewSecurePassword456!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/reset-password",
							"host": ["{{base_url}}"],
							"path": ["auth", "reset-password"]
						},
						"description": "Reset password using OTP received from forgot-password endpoint."
					},
					"response": []
				},
				{
					"name": "Request OTP",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{test_email}}\",\n  \"purpose\": \"register\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/request-otp",
							"host": ["{{base_url}}"],
							"path": ["auth", "request-otp"]
						},
						"description": "Request a new OTP. Purpose can be 'register' or 'reset_password'. Rate-limited to prevent abuse."
					},
					"response": []
				}
			],
			"description": "All authentication-related endpoints including registration, login, password management, and token operations."
		},
		{
			"name": "Profile",
			"item": [
				{
					"name": "Get Profile",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/profile",
							"host": ["{{base_url}}"],
							"path": ["profile"]
						},
						"description": "Get the authenticated user's complete profile information including personal details. Requires valid access token."
					},
					"response": []
				},
				{
					"name": "Create Profile",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"full_name\": \"John Doe\",\n  \"bio\": \"Software developer passionate about journaling\",\n  \"date_of_birth\": \"1990-01-15\",\n  \"phone_number\": \"+1234567890\",\n  \"address\": \"123 Main Street\",\n  \"city\": \"New York\",\n  \"country\": \"USA\",\n  \"timezone\": \"America/New_York\",\n  \"language\": \"en\",\n  \"avatar_url\": \"https://example.com/avatar.jpg\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/profile",
							"host": ["{{base_url}}"],
							"path": ["profile"]
						},
						"description": "Create a new profile for the authenticated user. All fields are optional except the ones you want to set initially."
					},
					"response": []
				},
				{
					"name": "Update Profile",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"full_name\": \"Jane Doe\",\n  \"bio\": \"Updated bio about my journaling journey\",\n  \"phone_number\": \"+1987654321\",\n  \"city\": \"Los Angeles\",\n  \"timezone\": \"America/Los_Angeles\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/profile",
							"host": ["{{base_url}}"],
							"path": ["profile"]
						},
						"description": "Update the authenticated user's profile. Only send the fields you want to update. All fields are optional."
					},
					"response": []
				},
				{
					"name": "Update Avatar",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"avatar_url\": \"https://example.com/new-avatar.jpg\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/profile/avatar",
							"host": ["{{base_url}}"],
							"path": ["profile", "avatar"]
						},
						"description": "Update user's avatar URL. Provide the URL of the uploaded avatar image."
					},
					"response": []
				},
				{
					"name": "Change Password",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"old_password\": \"{{test_password}}\",\n  \"new_password\": \"NewSecurePassword789!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/profile/change-password",
							"host": ["{{base_url}}"],
							"path": ["profile", "change-password"]
						},
						"description": "Change the authenticated user's password. Requires current password for verification. All refresh tokens will be revoked for security."
					},
					"response": []
				}
			],
			"description": "Profile management endpoints for authenticated users. Includes personal information, avatar, and password management."
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "Get User by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/:id",
							"host": ["{{base_url}}"],
							"path": ["users", ":id"],
							"variable": [
								{
									"key": "id",
									"value": "00000000-0000-0000-0000-000000000000",
									"description": "User UUID"
								}
							]
						},
						"description": "Get any user's profile by ID. Requires admin role. Replace :id with actual user UUID."
					},
					"response": []
				}
			],
			"description": "Admin-only endpoints requiring admin role in addition to authentication."
		},
		{
			"name": "Notes",
			"item": [
				{
					"name": "Create Note",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    pm.collectionVariables.set('note_id', jsonData.id);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"My First Note\",\n  \"tags\": [\"personal\", \"daily\"]\n}"
						},
						"url": {
							"raw": "{{base_url}}/notes",
							"host": ["{{base_url}}"],
							"path": ["notes"]
						},
						"description": "Create a new note with title and optional tags."
					},
					"response": []
				},
				{
					"name": "Get All Notes",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/notes",
							"host": ["{{base_url}}"],
							"path": ["notes"]
						},
						"description": "Get all notes for the authenticated user."
					},
					"response": []
				},
				{
					"name": "Get Note by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/notes/{{note_id}}",
							"host": ["{{base_url}}"],
							"path": ["notes", "{{note_id}}"]
						},
						"description": "Get a specific note with all its blocks."
					},
					"response": []
				},
				{
					"name": "Update Note",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Updated Note Title\",\n  \"tags\": [\"work\", \"important\"],\n  \"is_pinned\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/notes/{{note_id}}",
							"host": ["{{base_url}}"],
							"path": ["notes", "{{note_id}}"]
						},
						"description": "Update note title, tags, or pinned status."
					},
					"response": []
				},
				{
					"name": "Delete Note",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/notes/{{note_id}}",
							"host": ["{{base_url}}"],
							"path": ["notes", "{{note_id}}"]
						},
						"description": "Delete a note and all its blocks."
					},
					"response": []
				},
				{
					"name": "Add Block to Note",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    pm.collectionVariables.set('block_id', jsonData.id);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"paragraph\",\n  \"content_md\": \"This is a paragraph block with **markdown** support.\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/notes/{{note_id}}/blocks",
							"host": ["{{base_url}}"],
							"path": ["notes", "{{note_id}}", "blocks"]
						},
						"description": "Add a new block (paragraph, heading, todo, etc.) to a note."
					},
					"response": []
				},
				{
					"name": "Add Todo Block",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"todo\",\n  \"items\": [\n    {\"id\": \"t1\", \"text\": \"Buy groceries\", \"done\": false},\n    {\"id\": \"t2\", \"text\": \"Finish report\", \"done\": true}\n  ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/notes/{{note_id}}/blocks",
							"host": ["{{base_url}}"],
							"path": ["notes", "{{note_id}}", "blocks"]
						},
						"description": "Add a todo block with multiple todo items."
					},
					"response": []
				},
				{
					"name": "Update Block",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content_md\": \"Updated block content with new information.\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/notes/{{note_id}}/blocks/{{block_id}}",
							"host": ["{{base_url}}"],
							"path": ["notes", "{{note_id}}", "blocks", "{{block_id}}"]
						},
						"description": "Update the content of a specific block."
					},
					"response": []
				},
				{
					"name": "Delete Block",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/notes/{{note_id}}/blocks/{{block_id}}",
							"host": ["{{base_url}}"],
							"path": ["notes", "{{note_id}}", "blocks", "{{block_id}}"]
						},
						"description": "Delete a specific block from a note."
					},
					"response": []
				},
				{
					"name": "Reorder Blocks",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"order\": [\"b3\", \"b1\", \"b2\"]\n}"
						},
						"url": {
							"raw": "{{base_url}}/notes/{{note_id}}/blocks/order",
							"host": ["{{base_url}}"],
							"path": ["notes", "{{note_id}}", "blocks", "order"]
						},
						"description": "Reorder all blocks in a note by providing array of block IDs."
					},
					"response": []
				}
			],
			"description": "Endpoints for managing notes with blocks (paragraphs, headings, todos, etc.)."
		},
		{
			"name": "Todos",
			"item": [
				{
					"name": "Create Todo",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    pm.collectionVariables.set('todo_id', jsonData.id);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Buy groceries\",\n  \"priority\": \"high\",\n  \"due_date\": \"2025-10-30T00:00:00Z\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/todos",
							"host": ["{{base_url}}"],
							"path": ["todos"]
						},
						"description": "Create a new todo item with title, priority, and optional due date."
					},
					"response": []
				},
				{
					"name": "Get All Todos",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/todos",
							"host": ["{{base_url}}"],
							"path": ["todos"]
						},
						"description": "Get all todos for the authenticated user."
					},
					"response": []
				},
				{
					"name": "Update Todo",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"done\": true,\n  \"priority\": \"low\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/todos/{{todo_id}}",
							"host": ["{{base_url}}"],
							"path": ["todos", "{{todo_id}}"]
						},
						"description": "Update todo status, priority, title, or due date."
					},
					"response": []
				},
				{
					"name": "Delete Todo",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/todos/{{todo_id}}",
							"host": ["{{base_url}}"],
							"path": ["todos", "{{todo_id}}"]
						},
						"description": "Delete a todo item."
					},
					"response": []
				}
			],
			"description": "Endpoints for managing simple todo items."
		},
		{
			"name": "Tasks",
			"item": [
				{
					"name": "Create Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    pm.collectionVariables.set('task_id', jsonData.id);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Build backend API\",\n  \"description_md\": \"## Tasks\\n- Setup MongoDB\\n- Implement endpoints\\n- Write tests\",\n  \"priority\": \"high\",\n  \"deadline\": \"2025-11-05T00:00:00Z\",\n  \"tags\": [\"project\", \"backend\"]\n}"
						},
						"url": {
							"raw": "{{base_url}}/tasks",
							"host": ["{{base_url}}"],
							"path": ["tasks"]
						},
						"description": "Create a new task with title, description, priority, deadline, and tags."
					},
					"response": []
				},
				{
					"name": "Get All Tasks",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/tasks",
							"host": ["{{base_url}}"],
							"path": ["tasks"]
						},
						"description": "Get all tasks for the authenticated user."
					},
					"response": []
				},
				{
					"name": "Get Task by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/tasks/{{task_id}}",
							"host": ["{{base_url}}"],
							"path": ["tasks", "{{task_id}}"]
						},
						"description": "Get a specific task with all details."
					},
					"response": []
				},
				{
					"name": "Update Task",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"in_progress\",\n  \"priority\": \"medium\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/tasks/{{task_id}}",
							"host": ["{{base_url}}"],
							"path": ["tasks", "{{task_id}}"]
						},
						"description": "Update task status, priority, description, or other fields."
					},
					"response": []
				},
				{
					"name": "Delete Task",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/tasks/{{task_id}}",
							"host": ["{{base_url}}"],
							"path": ["tasks", "{{task_id}}"]
						},
						"description": "Delete a task."
					},
					"response": []
				}
			],
			"description": "Endpoints for managing complex tasks with descriptions and progress tracking."
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
